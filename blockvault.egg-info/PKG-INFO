Metadata-Version: 2.4
Name: blockvault
Version: 0.1.0
Summary: BlockVault Phase 1 - Flask backend with MetaMask authentication via signature verification
Author: ScriptXDemon
License: MIT
Requires-Python: >=3.10
Description-Content-Type: text/markdown
Requires-Dist: Flask<4.0.0,>=3.0.0
Requires-Dist: python-dotenv<2.0.0,>=1.0.0
Requires-Dist: web3<7.0.0,>=6.15.0
Requires-Dist: PyJWT<3.0.0,>=2.9.0
Requires-Dist: pymongo<5.0.0,>=4.8.0
Requires-Dist: ipfshttpclient<1.0.0,>=0.8.0a2
Requires-Dist: Flask-Cors<5.0.0,>=4.0.0
Requires-Dist: cryptography<43.0.0,>=42.0.0
Provides-Extra: dev
Requires-Dist: pytest<9.0.0,>=8.0.0; extra == "dev"
Requires-Dist: black<25.0.0,>=24.0.0; extra == "dev"
Requires-Dist: flake8<8.0.0,>=7.0.0; extra == "dev"
Requires-Dist: mypy<2.0.0,>=1.11.0; extra == "dev"
Requires-Dist: types-PyJWT; extra == "dev"
Requires-Dist: types-requests; extra == "dev"

# BlockVault (Phase 5 · On‑Chain RBAC & Secure Sharing)

BlockVault is an end‑to‑end encrypted vault for Web3 users. MetaMask provides authentication, a Solidity contract supplies role-based access control, and RSA public keys enable encrypted file sharing. Phase 5 introduces everything needed for production-ready secure collaboration: on-chain RBAC checks, shareable file secrets, IPFS metadata, refined React UX, and deployment guidance.

---

## Feature Highlights

- **Wallet Auth + JWT** – MetaMask signature flow (`/auth/get_nonce` → `/auth/login`) mints short-lived JWTs for the SPA.
- **On-Chain Roles** – The backend calls the deployed `RoleRegistry` Solidity contract via `web3.py`, caching results and enforcing `viewer`, `owner`, and `admin` permissions.
- **RSA-Based Sharing** – Users upload PEM public keys. File owners encrypt the data-passphrase with RSA OAEP and share it with specific addresses.
- **Share Management APIs** – Create, list, and revoke shares; recipients pull encrypted keys from `/files/shared`.
- **Configurable Storage** – MongoDB for metadata (with memory fallback) and optional IPFS pinning + gateway URLs.
- **Refined Frontend** – React cards for uploads, file management, and a new Sharing Center for key management and share dashboards, complete with network activity indicators and modal flows.
- **Deployment Ready** – Environment-driven CORS, structured `.env` template, and guidance for hosting the Flask API plus React SPA.

---

## Repository Layout

```
BlockVault/
├── blockvault/                 # Flask application package
│   ├── api/                    # Auth, file, and user blueprints
│   ├── core/                   # Config, security, RBAC, crypto helper
│   └── __init__.py             # App factory registering routes & CORS
├── contracts/RoleRegistry.sol  # Solidity RBAC registry
├── blockvault-frontend/        # React single page app
├── .env.example                # Reference environment configuration
├── pyproject.toml / requirements.txt
└── README.md
```

---

## Getting Started

### 1. Clone & Environment

```bash
# clone & enter
git clone https://github.com/ScriptXDemon/BlockVault.git
cd BlockVault

# create Python virtualenv
python -m venv .venv
source .venv/bin/activate

# install backend dependencies
pip install -e .[dev]

# copy environment template
cp .env.example .env
# edit .env with your secrets, Mongo URI, and Sepolia RPC + RoleRegistry address
```

_Key environment variables_

| Variable | Purpose |
| --- | --- |
| `MONGO_URI` | Mongo connection string (`memory://` for in-memory dev) |
| `SECRET_KEY` / `JWT_SECRET` | Flask & JWT secrets |
| `ETH_RPC_URL` | RPC endpoint (Sepolia recommended) |
| `ROLE_REGISTRY_ADDRESS` | Deployed `RoleRegistry` contract address |
| `CORS_ALLOWED_ORIGINS` | Comma-separated frontend origins (or `*` for dev) |
| `IPFS_ENABLED` / `IPFS_API_URL` | Optional IPFS pinning configuration |
| `ALLOW_DEV_TOKEN` | Set to `1` in dev to use `/auth/dev_token` shortcut |

### 2. Run the Backend

```bash
# from repo root
export FLASK_ENV=development
python -m blockvault.app
```

- **Mongo optional:** In-memory storage works for quick tests but resets on restart. Use Docker (`docker compose up -d mongo`) for persistence.
- **Dev convenience:** With `ALLOW_DEV_TOKEN=1`, retrieve a JWT without signing: `curl "http://localhost:5000/auth/dev_token?address=0xYourWallet"`.

### 3. Run the Frontend

```bash
cd blockvault-frontend
npm install
npm start
```

The SPA expects `REACT_APP_API_BASE` (optional). By default it assumes the API is reachable via the same origin proxy.

---

## API Overview (Phase 5)

| Endpoint | Method | Role | Description |
| --- | --- | --- | --- |
| `/auth/get_nonce` | POST | public | Issue login nonce for wallet signature |
| `/auth/login` | POST | public | Verify signature → JWT |
| `/auth/me` | GET | any | Returns wallet address + role name/value |
| `/files` | POST | owner | Upload encrypted file (AES-256-GCM CLI helper) |
| `/files` | GET | owner | List your files (supports `limit`/`after`) |
| `/files/<id>` | GET | owner/viewer | Download (requires passphrase) |
| `/files/<id>` | DELETE | owner | Remove file + shares |
| `/files/<id>/verify` | GET | owner | Confirms encrypted blob exists |
| `/files/<id>/share` | POST | owner | Encrypt passphrase to recipient RSA key |
| `/files/shared` | GET | viewer | Shares sent to you (with encrypted key) |
| `/files/shares/outgoing` | GET | owner | Shares you granted |
| `/files/shares/<id>` | DELETE | owner/admin | Revoke share |
| `/users/profile` | GET | viewer | Role info + sharing key status (add `?with_key=1` for PEM) |
| `/users/public_key` | POST/DELETE | viewer | Register/remove RSA public key |
| `/health` | GET | public | Liveness probe |

All authenticated routes require `Authorization: Bearer <jwt>`.

---

## Sharing Workflow

1. **Recipient registers RSA key**
   - Generate keypair (`openssl genrsa -out key.pem 4096`, then export public key: `openssl rsa -in key.pem -pubout -out pub.pem`).
   - Paste the PEM into the Sharing Center UI or call `POST /users/public_key`.
2. **Owner uploads & shares**
   - Upload a file with a strong passphrase (stored client-side only).
   - Click **Share** on the file, supply recipient address, optional note, optional expiration (`datetime-local`), and the passphrase.
   - The backend encrypts the passphrase with the recipient’s RSA key.
3. **Recipient consumes share**
   - Open Sharing Center → **Shares received** → copy the `encrypted_key`.
   - Decrypt using their RSA private key (`openssl rsautl -decrypt ...`).
   - Use decrypted passphrase to download via the UI (or `GET /files/<id>`).
4. **Revocation**
   - Owners can revoke any outgoing share; admins can revoke on behalf of others via `/files/shares/<id>`.

---

## Solidity Role Registry

Located at `contracts/RoleRegistry.sol`.

- Roles: `None`, `Viewer`, `Owner`, `Admin`.
- Admin = deployer or addresses promoted via `promoteAdmin`/`setRole`.
- Suggested deployment (Sepolia):
  ```bash
  forge create RoleRegistry --rpc-url $ETH_RPC_URL --private-key $PK
  ```
- After deployment, configure the backend (`ROLE_REGISTRY_ADDRESS`) and use the contract to assign roles:
  ```solidity
  setRole(0xUploader, Role.Owner);
  setRole(0xViewer, Role.Viewer);
  ```

If the contract address or RPC URL is unavailable, the backend logs a warning once and defaults to `admin` (useful for local development).

---

## Frontend Highlights

- **Network progress bar:** Tracks concurrent API calls via `useNetworkStore`.
- **Upload card:** Drag & drop, passphrase + optional AAD fields, in-app toast notifications, and custom event to refresh listings.
- **Files card:** Inline actions (download, share, verify, delete), copy CID/SHA, download modal requiring passphrase entry.
- **Sharing Center:**
  - Key management with PEM textarea + quick status badge.
  - Incoming shares list with metadata, note, encrypted key copy helper.
  - Outgoing shares grid with revoke action.

---

## Testing & Validation

### Automated

```bash
# backend tests (if/when added)
pytest -q
```

### Manual Smoke (recommended after each deployment)

1. **Auth Flow** – Connect wallet in the SPA, sign login message, confirm JWT.
2. **Upload & Verify** – Upload file, ensure it appears in list, verify blob.
3. **Share** – Share file with a second wallet; confirm entries in both sharing lists and ability to decrypt passphrase offline.
4. **RBAC Enforcement** – Assign `viewer` role and attempt upload (expect 403), assign `owner` role and retry (expect success).
5. **CORS** – Access API from deployed frontend domain; confirm no blocked preflight requests.

---

## Deployment Notes

- **Backend (Flask):** Suitable for Render, Railway, Fly.io, or Heroku. Run via `gunicorn blockvault.app:create_app()` and configure environment variables in the hosting dashboard. Mount persistent storage or connect to Atlas for MongoDB.
- **Frontend (React):** Deploy to Netlify, Vercel, or static S3 hosting. Configure `REACT_APP_API_BASE` to the backend URL and ensure the backend’s `CORS_ALLOWED_ORIGINS` includes the deployed origin.
- **Secrets Management:** Never commit `.env`. For production, rotate JWT and Flask secrets and supply a production-grade MongoDB connection string.
- **Monitoring:** Tail `backend.log` (or platform logs) for RBAC cache warnings and IPFS failures. Consider wrapping endpoints with structured logging before launch.

---

## Troubleshooting

| Symptom | Likely Cause | Fix |
| --- | --- | --- |
| `nonce expired` | Slow login flow | Request new nonce (`/auth/get_nonce`) |
| `missing bearer token` | Frontend lost JWT | Re-login; ensure toast host shows success |
| `recipient has not registered a sharing public key` | Recipient skipped key upload | Have them POST `/users/public_key` |
| Shares disappear after restart | Using memory DB | Switch to MongoDB instance |
| `RBAC contract not configured` warning | Missing env vars | Set `ETH_RPC_URL` + `ROLE_REGISTRY_ADDRESS` |

---

Happy hacking! Phase 5 delivers the full secure-sharing experience; extend it with auditing, notifications, or mobile clients as the next frontier.
